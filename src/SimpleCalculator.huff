/*Interface*/
#define function add(uint256, uint256) view returns(uint256)
#define function sub(uint256, uint256) view returns(uint256)
#define function multi(uint256, uint256) view returns(uint256)
#define function div(uint256, uint256) view returns(uint256)
#define function expo(uint256, uint256) view returns(uint256)
#define function modulo(uint256, uint256) view returns(uint256)
#define function getMsgSender() view returns(uint256)

/*Storage Slots*/


/*Methods*/

#define macro ADD_TWO_NUMBERS() = takes(0) returns(0){
    0x04
    calldataload
    0x24
    calldataload
    add

    0x00
    mstore
    0x20
    0x00
    return
}


//0xb67d77c500000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000078
#define macro SUB_TWO_NUMBERS() = takes(0) returns(0){
    //revert if underflow?
    0x24  //[0x04]
    calldataload        //[call data - function sig]
    0x04            //[0x24, calldata - function sig]
    calldataload
    sub

    0x00
    mstore
    0x20
    0x00
    return
    
}

#define macro MULTI_TWO_NUMBERS() = takes(0) returns(0){
    0x04  //[0x04]
    calldataload        //[call data - function sig]
    0x24            //[0x24, calldata - function sig]
    calldataload
    mul

    0x00
    mstore
    0x20
    0x00
    return
    
}

#define macro DIV_TWO_NUMBERS() = takes(0) returns(0){
    0x24
    calldataload
    0x04
    calldataload
    div

    0x00
    mstore
    0x20
    0x00
    return
    
}

//0x4f4752ba000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000008
#define macro EXPONENTIAL_NUMBERS() = takes(0) returns(0){
    0x04
    calldataload
    0x24
    calldataload
    exp

    0x00
    mstore
    0x20
    0x00
    return
}

#define macro MODULO_NUMBERS() = takes(0) returns(0){
    0x24
    calldataload
    0x04
    calldataload
    mod

    0x00
    mstore
    0x20
    0x00
    return
}

//0x7a6ce2e1
#define macro GET_MSG_SENDER() = takes(0) returns(0){
    caller // [msg.sender]
    0x00    //[0, msg.sender]
    mstore  //[]
    0x20    //[0x20]
    0x00    //[0, 0x20]
    return
}





#define macro MAIN() = takes(0) returns(0) {
    0x00  
    calldataload  
    0xE0 //off set for next line
    shr //shifts bits from the call data load to only select first 4 bytes

    dup1 //duplicates first stack item
    __FUNC_SIG(add) //keccak256 of the function
    eq // returns 0 if they are equal
    addJump
    jumpi //jumps if true


    dup1 __FUNC_SIG(sub) eq subJump jumpi

    dup1 __FUNC_SIG(multi) eq multiJump jumpi

    dup1 __FUNC_SIG(div) eq divJump jumpi

    dup1 __FUNC_SIG(expo) eq expJump jumpi

    dup1 __FUNC_SIG(modulo) eq modJump jumpi

    dup1 __FUNC_SIG(getMsgSender) eq msgSenderJump jumpi

    addJump:
        ADD_TWO_NUMBERS() 
    subJump:
        SUB_TWO_NUMBERS()
    multiJump:
        MULTI_TWO_NUMBERS()
    divJump:
        DIV_TWO_NUMBERS()
    expJump:
        EXPONENTIAL_NUMBERS()
    modJump:
        MODULO_NUMBERS()
    msgSenderJump:
        GET_MSG_SENDER()
}
